'use client';
import SectionLoader from '@/components/SectionLoader';
import { classifyPosts } from '@/lib/api/classify';
import { setSearchExploitMentions } from '@/lib/features/posts/postsSlices';

import { useAppDispatch, useAppSelector } from '@/lib/hooks';
import normalizePosts from '@/utils/normalizePosts';
import { useEffect, useState } from 'react';
import DarkWebAndSocialMediaMentionsCard from '../DarkWebAndSocialMediaMentionsCard';
import SectionTitle from '../SectionTitle';

const SearchExploit = ({ keyword, search, onlyData }) => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);

  const searchQuery = useAppSelector((state) => state.search.searchQuery);

  const postsMentions = useAppSelector(
    (state) => state.posts.searchExploitMentions,
  );

  const dispatch = useAppDispatch();

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        setLoading(true);
        // facebook
        const postsRes = await fetch('/api/stream', {
          method: 'POST',
          body: JSON.stringify({
            input: {
              keyword: keyword,
              start_date: '2025-01-01',
              end_date: new Date().toISOString().split('T')[0],
            },
            url: 'http://107.189.26.43:6900/search_exploit',
          }),
        });

        const postsResponse = await postsRes.json();
        // console.log('facebook posts: ', postsResponse);

        if (
          !postsResponse ||
          !Array.isArray(postsResponse[0]) ||
          postsResponse[0].length === 0 ||
          postsMentions[0]?.info === 'No posts found matching criteria.'
        ) {
          setPosts([]);
          setLoading(false);
          return;
        }

        const normalizedPosts = normalizePosts(
          postsResponse[0],
          'searchExploit',
        );
        console.log('normalized posts:', normalizedPosts);

        const classifiedPosts = await classifyPosts(normalizedPosts);
        console.log('classified posts:', classifiedPosts);

        if (!Array.isArray(classifiedPosts)) {
          // console.warn('Classified posts is not an array:', classifiedPosts);
          setPosts([]);
          return;
        }

        dispatch(setSearchExploitMentions(classifiedPosts));
        setPosts(classifiedPosts.slice(0, 3));
      } catch (error) {
        console.error('Search API Error:', error);
        setPosts([]);
      } finally {
        setLoading(false);
      }
    };

    if (searchQuery === search) {
      console.log('Using cached posts mentions:', postsMentions);
      // Ensure postsMentions is valid before setting
      if (Array.isArray(postsMentions) && postsMentions.length > 0) {
        setPosts(postsMentions.slice(0, 3));
      } else {
        console.warn('Invalid postsMentions:', postsMentions);
        setPosts([]);
      }
    } else {
      fetchPosts();
    }
  }, [keyword, search, searchQuery, postsMentions, dispatch]);

  // Add debug logging
  console.log('Current posts state:', posts);

  if (onlyData) {
    return null;
  }

  if (loading) {
    return <SectionLoader sectionTitle={'Search Exploit'} />;
  }

  // More comprehensive array validation
  if (!posts || !Array.isArray(posts) || posts.length === 0) {
    console.log('Posts validation failed:', posts);
    return null;
  }

  return (
    <div>
      <SectionTitle>Search Exploit</SectionTitle>
      {Array.isArray(posts) &&
        posts.map((post, index) => (
          <DarkWebAndSocialMediaMentionsCard key={index} {...post} />
        ))}
    </div>
  );
};

export default SearchExploit;
