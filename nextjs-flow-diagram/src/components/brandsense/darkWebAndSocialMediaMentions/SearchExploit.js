'use client';
import SectionLoader from '@/components/SectionLoader';
import { classifyPosts } from '@/lib/api/classify';
import { setDarkWebPosts } from '@/lib/features/posts/postsSlices';

import { useAppDispatch, useAppSelector } from '@/lib/hooks';
import normalizePosts from '@/utils/normalizePosts';
import { useEffect, useState } from 'react';
import DarkWebAndSocialMediaMentionsCard from '../DarkWebAndSocialMediaMentionsCard';
import SectionTitle from '../SectionTitle';
import checkSearchQuery from '@/utils/checkSearchQuery';
import { useCallback } from 'react';

const SearchExploit = ({ keyword, search, onlyData }) => {
  // const [posts, setPosts] = useState([]);
  // const [loading, setLoading] = useState(false);

  const searchQuery = useAppSelector((state) => state.search.searchQuery);

  // const darkWebPosts = useAppSelector(
  //   (state) => state.posts.searchExploitMentions,
  // );

  const darkWebPosts = useAppSelector((state) => state.posts.darkWebPosts);

  const dispatch = useAppDispatch();

  const fetchPosts = useCallback(async () => {
    try {
      // setLoading(true);
      // facebook
      const postsRes = await fetch('/api/stream', {
        method: 'POST',
        body: JSON.stringify({
          input: {
            keyword: keyword,
            start_date: '2025-01-01',
            end_date: new Date().toISOString().split('T')[0],
          },
          url: 'http://107.189.26.43:6900/search_exploit',
        }),
      });

      const postsResponse = await postsRes.json();
      // console.log('facebook posts: ', postsResponse);

      if (
        !postsResponse ||
        !Array.isArray(postsResponse[0]) ||
        postsResponse[0].length === 0 ||
        darkWebPosts[0]?.info === 'No posts found matching criteria.'
      ) {
        // setPosts([]);
        // setLoading(false);
        return;
      }

      // const normalizedPosts = normalizePosts(
      //   postsResponse[0],
      //   'searchExploit',
      // );
      const normalizedPosts = normalizePosts(postsResponse[0], 'darkWebPosts');
      // console.log('normalized posts:', normalizedPosts);

      const classifiedPosts = await classifyPosts(normalizedPosts);
      console.log('classified posts:', classifiedPosts);

      if (!Array.isArray(classifiedPosts)) {
        // console.warn('Classified posts is not an array:', classifiedPosts);
        // setPosts([]);
        return;
      }

      dispatch(setDarkWebPosts(classifiedPosts));
      // setPosts(classifiedPosts.slice(0, 3));
    } catch (error) {
      // console.log('Search API Error:', error);
      // setPosts([]);
    } finally {
      // setLoading(false);
    }
  }, [keyword, dispatch, darkWebPosts]);

  useEffect(() => {
    if (checkSearchQuery(searchQuery, search)) {
      // console.log('Using cached posts mentions:', darkWebPosts);
      // Ensure darkWebPosts is valid before setting
      // if (Array.isArray(darkWebPosts) && darkWebPosts.length > 0) {
      //   setPosts(darkWebPosts.slice(0, 3));
      // } else {
      //   // console.warn('Invalid darkWebPosts:', darkWebPosts);
      //   // setPosts([]);
      // }
    } else {
      setTimeout(() => {
        fetchPosts();
      }, 1000);
    }
  }, [search, searchQuery, darkWebPosts, fetchPosts]);

  // Add debug logging
  // console.log('Current posts:', posts);

  // if (onlyData) {
  //   return null;
  // }

  // if (loading) {
  //   return <SectionLoader sectionTitle={'Search Exploit'} />;
  // }

  // // More comprehensive array validation
  // if (!posts || !Array.isArray(posts) || posts.length === 0) {
  //   // console.log('Posts validation failed:', posts);
  //   return null;
  // }

  // return (
  //   <div>
  //     <SectionTitle>Search Exploit</SectionTitle>
  //     {Array.isArray(posts) &&
  //       posts.map((post, index) => (
  //         <DarkWebAndSocialMediaMentionsCard key={index} {...post} />
  //       ))}
  //   </div>
  // );

  return null;
};

export default SearchExploit;
